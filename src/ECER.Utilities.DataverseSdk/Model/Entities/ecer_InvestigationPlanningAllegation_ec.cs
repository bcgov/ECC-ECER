#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECER.Utilities.DataverseSdk.Model
{
	
	
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ecer_investigationplanningallegation_ec")]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.11")]
	public partial class ecer_InvestigationPlanningAllegation_ec : Microsoft.Xrm.Sdk.Entity
	{
		
		/// <summary>
		/// Available fields, a the time of codegen, for the ecer_investigationplanningallegation_ec entity
		/// </summary>
		public partial class Fields
		{
			public const string ecer_competencycompetenciesid = "ecer_competencycompetenciesid";
			public const string ecer_InvestigationPlanningAllegation_ecer_CompetencyCompetencies_ecer_CompetencyCompetencies = "ecer_InvestigationPlanningAllegation_ecer_CompetencyCompetencies_ecer_CompetencyCompetencies";
			public const string ecer_InvestigationPlanningAllegation_ecId = "ecer_investigationplanningallegation_ecid";
			public const string Id = "ecer_investigationplanningallegation_ecid";
			public const string ecer_investigationplanningallegationid = "ecer_investigationplanningallegationid";
			public const string VersionNumber = "versionnumber";
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_InvestigationPlanningAllegation_ec(System.Guid id) : 
				base(EntityLogicalName, id)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_InvestigationPlanningAllegation_ec(string keyName, object keyValue) : 
				base(EntityLogicalName, keyName, keyValue)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_InvestigationPlanningAllegation_ec(Microsoft.Xrm.Sdk.KeyAttributeCollection keyAttributes) : 
				base(EntityLogicalName, keyAttributes)
		{
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_InvestigationPlanningAllegation_ec() : 
				base(EntityLogicalName)
		{
		}
		
		public const string PrimaryIdAttribute = "ecer_investigationplanningallegation_ecid";
		
		public const string EntitySchemaName = "ecer_InvestigationPlanningAllegation_ec";
		
		public const string EntityLogicalName = "ecer_investigationplanningallegation_ec";
		
		public const string EntityLogicalCollectionName = null;
		
		public const string EntitySetName = "ecer_investigationplanningallegation_ecset";
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_competencycompetenciesid")]
		public System.Nullable<System.Guid> ecer_competencycompetenciesid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("ecer_competencycompetenciesid");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_investigationplanningallegation_ecid")]
		public System.Nullable<System.Guid> ecer_InvestigationPlanningAllegation_ecId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("ecer_investigationplanningallegation_ecid");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_investigationplanningallegation_ecid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				base.Id = value;
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_investigationplanningallegationid")]
		public System.Nullable<System.Guid> ecer_investigationplanningallegationid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("ecer_investigationplanningallegationid");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// N:N ecer_InvestigationPlanningAllegation_ecer_CompetencyCompetencies_ecer_CompetencyCompetencies
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_InvestigationPlanningAllegation_ecer_CompetencyCompetencies_ecer_CompetencyC" +
			"ompetencies")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_CompetencyCompetencies> ecer_InvestigationPlanningAllegation_ecer_CompetencyCompetencies_ecer_CompetencyCompetencies
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_CompetencyCompetencies>("ecer_InvestigationPlanningAllegation_ecer_CompetencyCompetencies_ecer_CompetencyC" +
						"ompetencies", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_CompetencyCompetencies>("ecer_InvestigationPlanningAllegation_ecer_CompetencyCompetencies_ecer_CompetencyC" +
						"ompetencies", null, value);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_InvestigationPlanningAllegation_ec(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["ecer_investigationplanningallegation_ecid"] = base.Id;
                        break;
                    case "ecer_investigationplanningallegation_ecid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}
#pragma warning restore CS1591
