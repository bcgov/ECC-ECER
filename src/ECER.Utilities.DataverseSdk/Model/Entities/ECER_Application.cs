#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECER.Utilities.DataverseSdk.Model
{
	
	
	/// <summary>
	/// Status of the Application
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public enum ecer_application_statecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	/// <summary>
	/// Reason for the status of the Application
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public enum ecer_Application_StatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 621870007,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decision = 290700003,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Draft = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Escalated = 290700002,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 621870003,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 290700001,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingQueue = 621870004,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 621870002,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reconsideration = 621870005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReconsiderationDecision = 621870006,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Submitted = 621870001,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Withdrawn = 290700004,
	}
	
	/// <summary>
	/// New Applications, Renewals, and Information Change
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ecer_application")]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public partial class ecer_Application : Microsoft.Xrm.Sdk.Entity
	{
		
		/// <summary>
		/// Available fields, a the time of codegen, for the ecer_application entity
		/// </summary>
		public partial class Fields
		{
			public const string bpf_ecer_application_ecer_certifications = "bpf_ecer_application_ecer_certifications";
			public const string CreatedBy = "createdby";
			public const string CreatedByName = "createdbyname";
			public const string CreatedByYomiName = "createdbyyominame";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByName = "createdonbehalfbyname";
			public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
			public const string ecer_AlternatePhoneNumber = "ecer_alternatephonenumber";
			public const string ecer_ApplicantAge = "ecer_applicantage";
			public const string ecer_ApplicantFullName = "ecer_applicantfullname";
			public const string ecer_Applicantid = "ecer_applicantid";
			public const string ecer_ApplicantidName = "ecer_applicantidname";
			public const string ecer_ApplicantidYomiName = "ecer_applicantidyominame";
			public const string ecer_ApplicantSignature = "ecer_applicantsignature";
			public const string ecer_application_Applicantid_contact = "ecer_application_Applicantid_contact";
			public const string ecer_application_Certificateid = "ecer_application_Certificateid";
			public const string ecer_application_DenialReasonType_ecer_denialr = "ecer_application_DenialReasonType_ecer_denialr";
			public const string ecer_ApplicationId = "ecer_applicationid";
			public const string Id = "ecer_applicationid";
			public const string ecer_ApplicationNumber = "ecer_applicationnumber";
			public const string ecer_Assessor = "ecer_assessor";
			public const string ecer_AssessorLead = "ecer_assessorlead";
			public const string ecer_AssessorLeadName = "ecer_assessorleadname";
			public const string ecer_AssessorLeadYomiName = "ecer_assessorleadyominame";
			public const string ecer_AssessorName = "ecer_assessorname";
			public const string ecer_AssessorYomiName = "ecer_assessoryominame";
			public const string ecer_Certificateid = "ecer_certificateid";
			public const string ecer_CertificateidName = "ecer_certificateidname";
			public const string ecer_CertificateType = "ecer_certificatetype";
			public const string ecer_characterreference_Applicationid = "ecer_characterreference_Applicationid";
			public const string ecer_CharacterReferenceApproved = "ecer_characterreferenceapproved";
			public const string ecer_characterreferenceapprovedName = "ecer_characterreferenceapprovedname";
			public const string ecer_CharacterReferenceReceived = "ecer_characterreferencereceived";
			public const string ecer_CharacterReferenceReceivedDate = "ecer_characterreferencereceiveddate";
			public const string ecer_characterreferencereceivedName = "ecer_characterreferencereceivedname";
			public const string ecer_City = "ecer_city";
			public const string ecer_comment_Application_ecer_application = "ecer_comment_Application_ecer_application";
			public const string ecer_communication_Applicationid = "ecer_communication_Applicationid";
			public const string ecer_Country = "ecer_country";
			public const string ecer_CurrentCertificationExpiryDate = "ecer_currentcertificationexpirydate";
			public const string ecer_CurrentCertificationNumber = "ecer_currentcertificationnumber";
			public const string ecer_DateEscalated = "ecer_dateescalated";
			public const string ecer_DateofBirth = "ecer_dateofbirth";
			public const string ecer_DateSigned = "ecer_datesigned";
			public const string ecer_DateSubmitted = "ecer_datesubmitted";
			public const string ecer_DeclarationDisciplinaryActionsAgainst = "ecer_declarationdisciplinaryactionsagainst";
			public const string ecer_declarationdisciplinaryactionsagainstName = "ecer_declarationdisciplinaryactionsagainstname";
			public const string ecer_DeclarationECEmayrequireinformation = "ecer_declarationecemayrequireinformation";
			public const string ecer_declarationecemayrequireinformationName = "ecer_declarationecemayrequireinformationname";
			public const string ecer_DeclarationInformationcanbeaudited = "ecer_declarationinformationcanbeaudited";
			public const string ecer_declarationinformationcanbeauditedName = "ecer_declarationinformationcanbeauditedname";
			public const string ecer_DeclarationInformationCompleteAccurate = "ecer_declarationinformationcompleteaccurate";
			public const string ecer_declarationinformationcompleteaccurateName = "ecer_declarationinformationcompleteaccuratename";
			public const string ecer_DenialReasonExplanation = "ecer_denialreasonexplanation";
			public const string ecer_DenialReasonType = "ecer_denialreasontype";
			public const string ecer_DenialReasonTypeName = "ecer_denialreasontypename";
			public const string ecer_DoesECERegistryHaveTranscript = "ecer_doeseceregistryhavetranscript";
			public const string ecer_doeseceregistryhavetranscriptName = "ecer_doeseceregistryhavetranscriptname";
			public const string ecer_ecer_professionaldevelopment_Applicationi = "ecer_ecer_professionaldevelopment_Applicationi";
			public const string ecer_EducationOrigin = "ecer_educationorigin";
			public const string ecer_educationoriginName = "ecer_educationoriginname";
			public const string ecer_EducationRecognition = "ecer_educationrecognition";
			public const string ecer_educationrecognitionName = "ecer_educationrecognitionname";
			public const string ecer_EducationTranscriptApproved = "ecer_educationtranscriptapproved";
			public const string ecer_educationtranscriptapprovedName = "ecer_educationtranscriptapprovedname";
			public const string ecer_EmailAddress = "ecer_emailaddress";
			public const string ecer_EscalateReason = "ecer_escalatereason";
			public const string ecer_EscalatetoTeamLead = "ecer_escalatetoteamlead";
			public const string ecer_escalatetoteamleadName = "ecer_escalatetoteamleadname";
			public const string ecer_ExplanationLetter = "ecer_explanationletter";
			public const string ecer_guardianreference_Applicationid = "ecer_guardianreference_Applicationid";
			public const string ecer_HasProfessionalDevelopment = "ecer_hasprofessionaldevelopment";
			public const string ecer_hasprofessionaldevelopmentName = "ecer_hasprofessionaldevelopmentname";
			public const string ecer_HasProvided400HoursWorkExperience = "ecer_hasprovided400hoursworkexperience";
			public const string ecer_hasprovided400hoursworkexperienceName = "ecer_hasprovided400hoursworkexperiencename";
			public const string ecer_HasProvided500HoursWorkExperience = "ecer_hasprovided500hoursworkexperience";
			public const string ecer_hasprovided500hoursworkexperienceName = "ecer_hasprovided500hoursworkexperiencename";
			public const string ecer_IsCharacterReferenceProvided = "ecer_ischaracterreferenceprovided";
			public const string ecer_ischaracterreferenceprovidedName = "ecer_ischaracterreferenceprovidedname";
			public const string ecer_isECE1YR = "ecer_isece1yr";
			public const string ecer_isece1yrName = "ecer_isece1yrname";
			public const string ecer_isECE5YR = "ecer_isece5yr";
			public const string ecer_isece5yrName = "ecer_isece5yrname";
			public const string ecer_IsECEAssistant = "ecer_iseceassistant";
			public const string ecer_iseceassistantName = "ecer_iseceassistantname";
			public const string ecer_isITE = "ecer_isite";
			public const string ecer_isiteName = "ecer_isitename";
			public const string ecer_IsOfficialTranscriptRequested = "ecer_isofficialtranscriptrequested";
			public const string ecer_isofficialtranscriptrequestedName = "ecer_isofficialtranscriptrequestedname";
			public const string ecer_IsPrimaryIdentificationProvided = "ecer_isprimaryidentificationprovided";
			public const string ecer_isprimaryidentificationprovidedName = "ecer_isprimaryidentificationprovidedname";
			public const string ecer_IsProofofNameChangedProvided = "ecer_isproofofnamechangedprovided";
			public const string ecer_isproofofnamechangedprovidedName = "ecer_isproofofnamechangedprovidedname";
			public const string ecer_IsSecondaryIdentificationProvided = "ecer_issecondaryidentificationprovided";
			public const string ecer_issecondaryidentificationprovidedName = "ecer_issecondaryidentificationprovidedname";
			public const string ecer_isSNE = "ecer_issne";
			public const string ecer_issneName = "ecer_issnename";
			public const string ecer_IsWorkExperienceReferenceProvided = "ecer_isworkexperiencereferenceprovided";
			public const string ecer_isworkexperiencereferenceprovidedName = "ecer_isworkexperiencereferenceprovidedname";
			public const string ecer_LegalFirstName = "ecer_legalfirstname";
			public const string ecer_LegalLastName = "ecer_legallastname";
			public const string ecer_LegalMiddleName = "ecer_legalmiddlename";
			public const string ecer_Name = "ecer_name";
			public const string ecer_ParentalReferenceApproved = "ecer_parentalreferenceapproved";
			public const string ecer_parentalreferenceapprovedName = "ecer_parentalreferenceapprovedname";
			public const string ecer_ParentalReferenceReceived = "ecer_parentalreferencereceived";
			public const string ecer_ParentalReferenceReceivedDate = "ecer_parentalreferencereceiveddate";
			public const string ecer_parentalreferencereceivedName = "ecer_parentalreferencereceivedname";
			public const string ecer_PortalStage = "ecer_portalstage";
			public const string ecer_PostalCode = "ecer_postalcode";
			public const string ecer_PreferredName = "ecer_preferredname";
			public const string ecer_PreviousName = "ecer_previousname";
			public const string ecer_PrimaryPhoneNumber = "ecer_primaryphonenumber";
			public const string ecer_Priority = "ecer_priority";
			public const string ecer_priorityName = "ecer_priorityname";
			public const string ecer_ProfessionalDevelopmentApproved = "ecer_professionaldevelopmentapproved";
			public const string ecer_professionaldevelopmentapprovedName = "ecer_professionaldevelopmentapprovedname";
			public const string ecer_ProgramClerk = "ecer_programclerk";
			public const string ecer_ProgramClerkName = "ecer_programclerkname";
			public const string ecer_ProgramClerkYomiName = "ecer_programclerkyominame";
			public const string ecer_Province = "ecer_province";
			public const string ecer_ReadyforAssessment = "ecer_readyforassessment";
			public const string ecer_ReadyforAssessmentDate = "ecer_readyforassessmentdate";
			public const string ecer_readyforassessmentName = "ecer_readyforassessmentname";
			public const string ecer_RequestCharacterReference = "ecer_requestcharacterreference";
			public const string ecer_requestcharacterreferenceName = "ecer_requestcharacterreferencename";
			public const string ecer_RequestWkExpReference = "ecer_requestwkexpreference";
			public const string ecer_requestwkexpreferenceName = "ecer_requestwkexpreferencename";
			public const string ecer_RoutetoAssessmentTeam = "ecer_routetoassessmentteam";
			public const string ecer_routetoassessmentteamName = "ecer_routetoassessmentteamname";
			public const string ecer_RoutetoInvestigationTeam = "ecer_routetoinvestigationteam";
			public const string ecer_routetoinvestigationteamName = "ecer_routetoinvestigationteamname";
			public const string ecer_StatusReasonDetail = "ecer_statusreasondetail";
			public const string ecer_statusreasondetailName = "ecer_statusreasondetailname";
			public const string ecer_street = "ecer_street";
			public const string ecer_TotalApprovedWorkExperienceHours = "ecer_totalapprovedworkexperiencehours";
			public const string ecer_transcript_Applicationid = "ecer_transcript_Applicationid";
			public const string ecer_TranscriptReceived = "ecer_transcriptreceived";
			public const string ecer_TranscriptReceivedDate = "ecer_transcriptreceiveddate";
			public const string ecer_transcriptreceivedName = "ecer_transcriptreceivedname";
			public const string ecer_Type = "ecer_type";
			public const string ecer_typeName = "ecer_typename";
			public const string ecer_WorkExperienceReceived = "ecer_workexperiencereceived";
			public const string ecer_WorkExperienceReceivedDate = "ecer_workexperiencereceiveddate";
			public const string ecer_workexperiencereceivedName = "ecer_workexperiencereceivedname";
			public const string ecer_workexperienceref_Applicationid_ecer = "ecer_workexperienceref_Applicationid_ecer";
			public const string ecer_WorkExperienceReferenceApproved = "ecer_workexperiencereferenceapproved";
			public const string ecer_workexperiencereferenceapprovedName = "ecer_workexperiencereferenceapprovedname";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByName = "modifiedbyname";
			public const string ModifiedByYomiName = "modifiedbyyominame";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
			public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwnerIdName = "owneridname";
			public const string OwnerIdYomiName = "owneridyominame";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningBusinessUnitName = "owningbusinessunitname";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string StateCode = "statecode";
			public const string statecodeName = "statecodename";
			public const string StatusCode = "statuscode";
			public const string statuscodeName = "statuscodename";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_Application(System.Guid id) : 
				base(EntityLogicalName, id)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_Application(string keyName, object keyValue) : 
				base(EntityLogicalName, keyName, keyValue)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_Application(Microsoft.Xrm.Sdk.KeyAttributeCollection keyAttributes) : 
				base(EntityLogicalName, keyAttributes)
		{
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_Application() : 
				base(EntityLogicalName)
		{
		}
		
		public const string PrimaryIdAttribute = "ecer_applicationid";
		
		public const string PrimaryNameAttribute = "ecer_name";
		
		public const string EntitySchemaName = "ecer_Application";
		
		public const string EntityLogicalName = "ecer_application";
		
		public const string EntityLogicalCollectionName = "ecer_applications";
		
		public const string EntitySetName = "ecer_applications";
		
		/// <summary>
		/// Unique identifier of the user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyname")]
		public string CreatedByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyyominame")]
		public string CreatedByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("createdonbehalfby", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyname")]
		public string CreatedOnBehalfByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
		public string CreatedOnBehalfByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_alternatephonenumber")]
		public string ecer_AlternatePhoneNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_alternatephonenumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_alternatephonenumber", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicantage")]
		public System.Nullable<double> ecer_ApplicantAge
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<double>>("ecer_applicantage");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_applicantage", value);
			}
		}
		
		/// <summary>
		/// For declaration
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicantfullname")]
		public string ecer_ApplicantFullName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_applicantfullname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_applicantfullname", value);
			}
		}
		
		/// <summary>
		/// Person who applies for this application.  Legacy system exists in text only.  Power Automate will search using text and determine if new or existing record is needed
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicantid")]
		public Microsoft.Xrm.Sdk.EntityReference ecer_Applicantid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ecer_applicantid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_applicantid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicantidname")]
		public string ecer_ApplicantidName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_applicantid"))
				{
					return this.FormattedValues["ecer_applicantid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicantidyominame")]
		public string ecer_ApplicantidYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_applicantid"))
				{
					return this.FormattedValues["ecer_applicantid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// may be BC Service Card ID when login from Portal
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicantsignature")]
		public string ecer_ApplicantSignature
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_applicantsignature");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_applicantsignature", value);
			}
		}
		
		/// <summary>
		/// Unique identifier for entity instances
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicationid")]
		public System.Nullable<System.Guid> ecer_ApplicationId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("ecer_applicationid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_applicationid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicationid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.ecer_ApplicationId = value;
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicationnumber")]
		public string ecer_ApplicationNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_applicationnumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_applicationnumber", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_assessor")]
		public Microsoft.Xrm.Sdk.EntityReference ecer_Assessor
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ecer_assessor");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_assessor", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_assessorlead")]
		public Microsoft.Xrm.Sdk.EntityReference ecer_AssessorLead
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ecer_assessorlead");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_assessorlead", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_assessorleadname")]
		public string ecer_AssessorLeadName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_assessorlead"))
				{
					return this.FormattedValues["ecer_assessorlead"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_assessorleadyominame")]
		public string ecer_AssessorLeadYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_assessorlead"))
				{
					return this.FormattedValues["ecer_assessorlead"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_assessorname")]
		public string ecer_AssessorName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_assessor"))
				{
					return this.FormattedValues["ecer_assessor"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_assessoryominame")]
		public string ecer_AssessorYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_assessor"))
				{
					return this.FormattedValues["ecer_assessor"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_certificateid")]
		public Microsoft.Xrm.Sdk.EntityReference ecer_Certificateid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ecer_certificateid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_certificateid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_certificateidname")]
		public string ecer_CertificateidName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_certificateid"))
				{
					return this.FormattedValues["ecer_certificateid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// System Use - Aggregate of choices ECE Assistant, ECE 1 YR, ECE 5 YR, ITE, SNE in TEXT format for use in Document merging
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_certificatetype")]
		public string ecer_CertificateType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_certificatetype");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_certificatetype", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_characterreferenceapproved")]
		public virtual ecer_YesNoNull? ecer_CharacterReferenceApproved
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_YesNoNull?)(EntityOptionSetEnum.GetEnum(this, "ecer_characterreferenceapproved")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_characterreferenceapproved", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_characterreferenceapprovedname")]
		public string ecer_characterreferenceapprovedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_characterreferenceapproved"))
				{
					return this.FormattedValues["ecer_characterreferenceapproved"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_characterreferencereceived")]
		public System.Nullable<bool> ecer_CharacterReferenceReceived
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_characterreferencereceived");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_characterreferencereceived", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_characterreferencereceiveddate")]
		public System.Nullable<System.DateTime> ecer_CharacterReferenceReceivedDate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_characterreferencereceiveddate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_characterreferencereceiveddate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_characterreferencereceivedname")]
		public string ecer_characterreferencereceivedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_characterreferencereceived"))
				{
					return this.FormattedValues["ecer_characterreferencereceived"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_city")]
		public string ecer_City
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_city");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_city", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_country")]
		public string ecer_Country
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_country");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_country", value);
			}
		}
		
		/// <summary>
		/// Expiry Date for Current Certification
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_currentcertificationexpirydate")]
		public System.Nullable<System.DateTime> ecer_CurrentCertificationExpiryDate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_currentcertificationexpirydate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_currentcertificationexpirydate", value);
			}
		}
		
		/// <summary>
		/// Applicant entry of Certification Number to lookup existing Certification
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_currentcertificationnumber")]
		public string ecer_CurrentCertificationNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_currentcertificationnumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_currentcertificationnumber", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_dateescalated")]
		public System.Nullable<System.DateTime> ecer_DateEscalated
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_dateescalated");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_dateescalated", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_dateofbirth")]
		public System.Nullable<System.DateTime> ecer_DateofBirth
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_dateofbirth");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_dateofbirth", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_datesigned")]
		public System.Nullable<System.DateTime> ecer_DateSigned
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_datesigned");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_datesigned", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_datesubmitted")]
		public System.Nullable<System.DateTime> ecer_DateSubmitted
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_datesubmitted");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_datesubmitted", value);
			}
		}
		
		/// <summary>
		/// I understand that the ECE Registry may take disciplinary action against me, including action to cancel my
///certification, if I have, by omission or commission, knowingly given false or misleading information in the course of
///completing this application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationdisciplinaryactionsagainst")]
		public System.Nullable<bool> ecer_DeclarationDisciplinaryActionsAgainst
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_declarationdisciplinaryactionsagainst");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_declarationdisciplinaryactionsagainst", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationdisciplinaryactionsagainstname")]
		public string ecer_declarationdisciplinaryactionsagainstName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_declarationdisciplinaryactionsagainst"))
				{
					return this.FormattedValues["ecer_declarationdisciplinaryactionsagainst"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// I understand that the ECE Registry may require additional information (including supporting documents) in
///connection with this application.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationecemayrequireinformation")]
		public System.Nullable<bool> ecer_DeclarationECEmayrequireinformation
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_declarationecemayrequireinformation");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_declarationecemayrequireinformation", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationecemayrequireinformationname")]
		public string ecer_declarationecemayrequireinformationName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_declarationecemayrequireinformation"))
				{
					return this.FormattedValues["ecer_declarationecemayrequireinformation"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// I understand that information in this application or subsequently provided information may be reviewed, audited, and
///verified for the purpose of determining or auditing my eligibility for an ECE Certificate in British Columbia.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationinformationcanbeaudited")]
		public System.Nullable<bool> ecer_DeclarationInformationcanbeaudited
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_declarationinformationcanbeaudited");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_declarationinformationcanbeaudited", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationinformationcanbeauditedname")]
		public string ecer_declarationinformationcanbeauditedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_declarationinformationcanbeaudited"))
				{
					return this.FormattedValues["ecer_declarationinformationcanbeaudited"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// I confirm that the information provided in this application is complete and accurate. I understand if inaccurate
///information is submitted it may result in the denial of certification.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationinformationcompleteaccurate")]
		public System.Nullable<bool> ecer_DeclarationInformationCompleteAccurate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_declarationinformationcompleteaccurate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_declarationinformationcompleteaccurate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_declarationinformationcompleteaccuratename")]
		public string ecer_declarationinformationcompleteaccurateName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_declarationinformationcompleteaccurate"))
				{
					return this.FormattedValues["ecer_declarationinformationcompleteaccurate"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_denialreasonexplanation")]
		public string ecer_DenialReasonExplanation
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_denialreasonexplanation");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_denialreasonexplanation", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_denialreasontype")]
		public Microsoft.Xrm.Sdk.EntityReference ecer_DenialReasonType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ecer_denialreasontype");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_denialreasontype", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_denialreasontypename")]
		public string ecer_DenialReasonTypeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_denialreasontype"))
				{
					return this.FormattedValues["ecer_denialreasontype"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_doeseceregistryhavetranscript")]
		public System.Nullable<bool> ecer_DoesECERegistryHaveTranscript
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_doeseceregistryhavetranscript");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_doeseceregistryhavetranscript", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_doeseceregistryhavetranscriptname")]
		public string ecer_doeseceregistryhavetranscriptName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_doeseceregistryhavetranscript"))
				{
					return this.FormattedValues["ecer_doeseceregistryhavetranscript"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_educationorigin")]
		public virtual ecer_EducationOrigin? ecer_EducationOrigin
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_EducationOrigin?)(EntityOptionSetEnum.GetEnum(this, "ecer_educationorigin")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_educationorigin", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_educationoriginname")]
		public string ecer_educationoriginName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_educationorigin"))
				{
					return this.FormattedValues["ecer_educationorigin"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_educationrecognition")]
		public virtual ecer_EducationRecognition? ecer_EducationRecognition
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_EducationRecognition?)(EntityOptionSetEnum.GetEnum(this, "ecer_educationrecognition")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_educationrecognition", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_educationrecognitionname")]
		public string ecer_educationrecognitionName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_educationrecognition"))
				{
					return this.FormattedValues["ecer_educationrecognition"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_educationtranscriptapproved")]
		public virtual ecer_YesNoNull? ecer_EducationTranscriptApproved
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_YesNoNull?)(EntityOptionSetEnum.GetEnum(this, "ecer_educationtranscriptapproved")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_educationtranscriptapproved", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_educationtranscriptapprovedname")]
		public string ecer_educationtranscriptapprovedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_educationtranscriptapproved"))
				{
					return this.FormattedValues["ecer_educationtranscriptapproved"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Applicant Email Address - This will also be the email be sent if Application is set as recipient
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_emailaddress")]
		public string ecer_EmailAddress
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_emailaddress");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_emailaddress", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_escalatereason")]
		public string ecer_EscalateReason
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_escalatereason");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_escalatereason", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_escalatetoteamlead")]
		public virtual ecer_YesNoNull? ecer_EscalatetoTeamLead
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_YesNoNull?)(EntityOptionSetEnum.GetEnum(this, "ecer_escalatetoteamlead")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_escalatetoteamlead", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_escalatetoteamleadname")]
		public string ecer_escalatetoteamleadName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_escalatetoteamlead"))
				{
					return this.FormattedValues["ecer_escalatetoteamlead"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Provide the reason(s) why you were unable to complete the required 500 hours of supervised work experience during the term of your ECE One Year
///Certificate and/or why you were unable to provide a reference from the certified ECE who supervised the hours.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_explanationletter")]
		public string ecer_ExplanationLetter
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_explanationletter");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_explanationletter", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_hasprofessionaldevelopment")]
		public System.Nullable<bool> ecer_HasProfessionalDevelopment
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_hasprofessionaldevelopment");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_hasprofessionaldevelopment", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_hasprofessionaldevelopmentname")]
		public string ecer_hasprofessionaldevelopmentName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_hasprofessionaldevelopment"))
				{
					return this.FormattedValues["ecer_hasprofessionaldevelopment"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_hasprovided400hoursworkexperience")]
		public System.Nullable<bool> ecer_HasProvided400HoursWorkExperience
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_hasprovided400hoursworkexperience");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_hasprovided400hoursworkexperience", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_hasprovided400hoursworkexperiencename")]
		public string ecer_hasprovided400hoursworkexperienceName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_hasprovided400hoursworkexperience"))
				{
					return this.FormattedValues["ecer_hasprovided400hoursworkexperience"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_hasprovided500hoursworkexperience")]
		public System.Nullable<bool> ecer_HasProvided500HoursWorkExperience
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_hasprovided500hoursworkexperience");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_hasprovided500hoursworkexperience", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_hasprovided500hoursworkexperiencename")]
		public string ecer_hasprovided500hoursworkexperienceName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_hasprovided500hoursworkexperience"))
				{
					return this.FormattedValues["ecer_hasprovided500hoursworkexperience"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_ischaracterreferenceprovided")]
		public System.Nullable<bool> ecer_IsCharacterReferenceProvided
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_ischaracterreferenceprovided");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_ischaracterreferenceprovided", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_ischaracterreferenceprovidedname")]
		public string ecer_ischaracterreferenceprovidedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_ischaracterreferenceprovided"))
				{
					return this.FormattedValues["ecer_ischaracterreferenceprovided"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isece1yr")]
		public System.Nullable<bool> ecer_isECE1YR
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_isece1yr");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_isece1yr", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isece1yrname")]
		public string ecer_isece1yrName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_isece1yr"))
				{
					return this.FormattedValues["ecer_isece1yr"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isece5yr")]
		public System.Nullable<bool> ecer_isECE5YR
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_isece5yr");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_isece5yr", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isece5yrname")]
		public string ecer_isece5yrName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_isece5yr"))
				{
					return this.FormattedValues["ecer_isece5yr"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_iseceassistant")]
		public System.Nullable<bool> ecer_IsECEAssistant
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_iseceassistant");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_iseceassistant", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_iseceassistantname")]
		public string ecer_iseceassistantName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_iseceassistant"))
				{
					return this.FormattedValues["ecer_iseceassistant"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isite")]
		public System.Nullable<bool> ecer_isITE
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_isite");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_isite", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isitename")]
		public string ecer_isiteName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_isite"))
				{
					return this.FormattedValues["ecer_isite"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isofficialtranscriptrequested")]
		public System.Nullable<bool> ecer_IsOfficialTranscriptRequested
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_isofficialtranscriptrequested");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_isofficialtranscriptrequested", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isofficialtranscriptrequestedname")]
		public string ecer_isofficialtranscriptrequestedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_isofficialtranscriptrequested"))
				{
					return this.FormattedValues["ecer_isofficialtranscriptrequested"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isprimaryidentificationprovided")]
		public System.Nullable<bool> ecer_IsPrimaryIdentificationProvided
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_isprimaryidentificationprovided");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_isprimaryidentificationprovided", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isprimaryidentificationprovidedname")]
		public string ecer_isprimaryidentificationprovidedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_isprimaryidentificationprovided"))
				{
					return this.FormattedValues["ecer_isprimaryidentificationprovided"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isproofofnamechangedprovided")]
		public System.Nullable<bool> ecer_IsProofofNameChangedProvided
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_isproofofnamechangedprovided");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_isproofofnamechangedprovided", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isproofofnamechangedprovidedname")]
		public string ecer_isproofofnamechangedprovidedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_isproofofnamechangedprovided"))
				{
					return this.FormattedValues["ecer_isproofofnamechangedprovided"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_issecondaryidentificationprovided")]
		public System.Nullable<bool> ecer_IsSecondaryIdentificationProvided
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_issecondaryidentificationprovided");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_issecondaryidentificationprovided", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_issecondaryidentificationprovidedname")]
		public string ecer_issecondaryidentificationprovidedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_issecondaryidentificationprovided"))
				{
					return this.FormattedValues["ecer_issecondaryidentificationprovided"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_issne")]
		public System.Nullable<bool> ecer_isSNE
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_issne");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_issne", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_issnename")]
		public string ecer_issneName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_issne"))
				{
					return this.FormattedValues["ecer_issne"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isworkexperiencereferenceprovided")]
		public System.Nullable<bool> ecer_IsWorkExperienceReferenceProvided
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_isworkexperiencereferenceprovided");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_isworkexperiencereferenceprovided", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_isworkexperiencereferenceprovidedname")]
		public string ecer_isworkexperiencereferenceprovidedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_isworkexperiencereferenceprovided"))
				{
					return this.FormattedValues["ecer_isworkexperiencereferenceprovided"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_legalfirstname")]
		public string ecer_LegalFirstName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_legalfirstname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_legalfirstname", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_legallastname")]
		public string ecer_LegalLastName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_legallastname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_legallastname", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_legalmiddlename")]
		public string ecer_LegalMiddleName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_legalmiddlename");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_legalmiddlename", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_name")]
		public string ecer_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_name");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_name", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_parentalreferenceapproved")]
		public virtual ecer_YesNoNull? ecer_ParentalReferenceApproved
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_YesNoNull?)(EntityOptionSetEnum.GetEnum(this, "ecer_parentalreferenceapproved")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_parentalreferenceapproved", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_parentalreferenceapprovedname")]
		public string ecer_parentalreferenceapprovedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_parentalreferenceapproved"))
				{
					return this.FormattedValues["ecer_parentalreferenceapproved"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_parentalreferencereceived")]
		public System.Nullable<bool> ecer_ParentalReferenceReceived
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_parentalreferencereceived");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_parentalreferencereceived", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_parentalreferencereceiveddate")]
		public System.Nullable<System.DateTime> ecer_ParentalReferenceReceivedDate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_parentalreferencereceiveddate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_parentalreferencereceiveddate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_parentalreferencereceivedname")]
		public string ecer_parentalreferencereceivedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_parentalreferencereceived"))
				{
					return this.FormattedValues["ecer_parentalreferencereceived"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// System Use. For Portal progress persistence so portal users can return to corresponding stage of a Save as Draft application 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_portalstage")]
		public string ecer_PortalStage
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_portalstage");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_portalstage", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_postalcode")]
		public string ecer_PostalCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_postalcode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_postalcode", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_preferredname")]
		public string ecer_PreferredName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_preferredname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_preferredname", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_previousname")]
		public string ecer_PreviousName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_previousname");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_previousname", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_primaryphonenumber")]
		public string ecer_PrimaryPhoneNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_primaryphonenumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_primaryphonenumber", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_priority")]
		public virtual ecer_Priority? ecer_Priority
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_Priority?)(EntityOptionSetEnum.GetEnum(this, "ecer_priority")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_priority", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_priorityname")]
		public string ecer_priorityName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_priority"))
				{
					return this.FormattedValues["ecer_priority"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_professionaldevelopmentapproved")]
		public virtual ecer_YesNoNull? ecer_ProfessionalDevelopmentApproved
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_YesNoNull?)(EntityOptionSetEnum.GetEnum(this, "ecer_professionaldevelopmentapproved")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_professionaldevelopmentapproved", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_professionaldevelopmentapprovedname")]
		public string ecer_professionaldevelopmentapprovedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_professionaldevelopmentapproved"))
				{
					return this.FormattedValues["ecer_professionaldevelopmentapproved"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_programclerk")]
		public Microsoft.Xrm.Sdk.EntityReference ecer_ProgramClerk
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ecer_programclerk");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_programclerk", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_programclerkname")]
		public string ecer_ProgramClerkName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_programclerk"))
				{
					return this.FormattedValues["ecer_programclerk"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_programclerkyominame")]
		public string ecer_ProgramClerkYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_programclerk"))
				{
					return this.FormattedValues["ecer_programclerk"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_province")]
		public string ecer_Province
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_province");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_province", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_readyforassessment")]
		public System.Nullable<bool> ecer_ReadyforAssessment
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_readyforassessment");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_readyforassessment", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_readyforassessmentdate")]
		public System.Nullable<System.DateTime> ecer_ReadyforAssessmentDate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_readyforassessmentdate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_readyforassessmentdate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_readyforassessmentname")]
		public string ecer_readyforassessmentName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_readyforassessment"))
				{
					return this.FormattedValues["ecer_readyforassessment"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_requestcharacterreference")]
		public System.Nullable<bool> ecer_RequestCharacterReference
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_requestcharacterreference");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_requestcharacterreference", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_requestcharacterreferencename")]
		public string ecer_requestcharacterreferenceName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_requestcharacterreference"))
				{
					return this.FormattedValues["ecer_requestcharacterreference"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_requestwkexpreference")]
		public System.Nullable<bool> ecer_RequestWkExpReference
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_requestwkexpreference");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_requestwkexpreference", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_requestwkexpreferencename")]
		public string ecer_requestwkexpreferenceName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_requestwkexpreference"))
				{
					return this.FormattedValues["ecer_requestwkexpreference"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_routetoassessmentteam")]
		public virtual ecer_YesNoNull? ecer_RoutetoAssessmentTeam
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_YesNoNull?)(EntityOptionSetEnum.GetEnum(this, "ecer_routetoassessmentteam")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_routetoassessmentteam", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_routetoassessmentteamname")]
		public string ecer_routetoassessmentteamName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_routetoassessmentteam"))
				{
					return this.FormattedValues["ecer_routetoassessmentteam"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_routetoinvestigationteam")]
		public System.Nullable<bool> ecer_RoutetoInvestigationTeam
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_routetoinvestigationteam");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_routetoinvestigationteam", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_routetoinvestigationteamname")]
		public string ecer_routetoinvestigationteamName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_routetoinvestigationteam"))
				{
					return this.FormattedValues["ecer_routetoinvestigationteam"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_statusreasondetail")]
		public virtual ecer_ApplicationStatusReasonDetail? ecer_StatusReasonDetail
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_ApplicationStatusReasonDetail?)(EntityOptionSetEnum.GetEnum(this, "ecer_statusreasondetail")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_statusreasondetail", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_statusreasondetailname")]
		public string ecer_statusreasondetailName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_statusreasondetail"))
				{
					return this.FormattedValues["ecer_statusreasondetail"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_street")]
		public string ecer_street
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("ecer_street");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_street", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_totalapprovedworkexperiencehours")]
		public System.Nullable<decimal> ecer_TotalApprovedWorkExperienceHours
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("ecer_totalapprovedworkexperiencehours");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_totalapprovedworkexperiencehours", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_transcriptreceived")]
		public System.Nullable<bool> ecer_TranscriptReceived
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_transcriptreceived");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_transcriptreceived", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_transcriptreceiveddate")]
		public System.Nullable<System.DateTime> ecer_TranscriptReceivedDate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_transcriptreceiveddate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_transcriptreceiveddate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_transcriptreceivedname")]
		public string ecer_transcriptreceivedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_transcriptreceived"))
				{
					return this.FormattedValues["ecer_transcriptreceived"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_type")]
		public virtual ecer_ApplicationTypes? ecer_Type
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_ApplicationTypes?)(EntityOptionSetEnum.GetEnum(this, "ecer_type")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_type", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_typename")]
		public string ecer_typeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_type"))
				{
					return this.FormattedValues["ecer_type"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_workexperiencereceived")]
		public System.Nullable<bool> ecer_WorkExperienceReceived
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ecer_workexperiencereceived");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_workexperiencereceived", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_workexperiencereceiveddate")]
		public System.Nullable<System.DateTime> ecer_WorkExperienceReceivedDate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("ecer_workexperiencereceiveddate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_workexperiencereceiveddate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_workexperiencereceivedname")]
		public string ecer_workexperiencereceivedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_workexperiencereceived"))
				{
					return this.FormattedValues["ecer_workexperiencereceived"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_workexperiencereferenceapproved")]
		public virtual ecer_YesNoNull? ecer_WorkExperienceReferenceApproved
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_YesNoNull?)(EntityOptionSetEnum.GetEnum(this, "ecer_workexperiencereferenceapproved")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ecer_workexperiencereferenceapproved", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_workexperiencereferenceapprovedname")]
		public string ecer_workexperiencereferenceapprovedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ecer_workexperiencereferenceapproved"))
				{
					return this.FormattedValues["ecer_workexperiencereferenceapproved"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Sequence number of the import that created this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public System.Nullable<int> ImportSequenceNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("importsequencenumber", value);
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyname")]
		public string ModifiedByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyyominame")]
		public string ModifiedByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("modifiedonbehalfby", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
		public string ModifiedOnBehalfByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
		public string ModifiedOnBehalfByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time that the record was migrated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public System.Nullable<System.DateTime> OverriddenCreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("overriddencreatedon", value);
			}
		}
		
		/// <summary>
		/// Owner Id
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		public Microsoft.Xrm.Sdk.EntityReference OwnerId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("ownerid", value);
			}
		}
		
		/// <summary>
		/// Name of the owner
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridname")]
		public string OwnerIdName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ownerid"))
				{
					return this.FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Yomi name of the owner
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridyominame")]
		public string OwnerIdYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("ownerid"))
				{
					return this.FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunitname")]
		public string OwningBusinessUnitName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("owningbusinessunit"))
				{
					return this.FormattedValues["owningbusinessunit"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		public Microsoft.Xrm.Sdk.EntityReference OwningTeam
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		public Microsoft.Xrm.Sdk.EntityReference OwningUser
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Contains the id of the process associated with the entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processid")]
		public System.Nullable<System.Guid> processid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("processid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("processid", value);
			}
		}
		
		/// <summary>
		/// Contains the id of the stage where the entity is located.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("stageid")]
		public System.Nullable<System.Guid> stageid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("stageid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("stageid", value);
			}
		}
		
		/// <summary>
		/// Status of the Application
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public virtual ecer_application_statecode? StateCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_application_statecode?)(EntityOptionSetEnum.GetEnum(this, "statecode")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("statecode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecodename")]
		public string statecodeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("statecode"))
				{
					return this.FormattedValues["statecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Reason for the status of the Application
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual ecer_Application_StatusCode? StatusCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((ecer_Application_StatusCode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("statuscode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscodename")]
		public string statuscodeName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (this.FormattedValues.Contains("statuscode"))
				{
					return this.FormattedValues["statuscode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("timezoneruleversionnumber")]
		public System.Nullable<int> TimeZoneRuleVersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("timezoneruleversionnumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("timezoneruleversionnumber", value);
			}
		}
		
		/// <summary>
		/// A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("traversedpath")]
		public string traversedpath
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("traversedpath");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("traversedpath", value);
			}
		}
		
		/// <summary>
		/// Time zone code that was in use when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("utcconversiontimezonecode")]
		public System.Nullable<int> UTCConversionTimeZoneCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("utcconversiontimezonecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetAttributeValue("utcconversiontimezonecode", value);
			}
		}
		
		/// <summary>
		/// Version Number
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N bpf_ecer_application_ecer_certifications
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("bpf_ecer_application_ecer_certifications")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_certifications> bpf_ecer_application_ecer_certifications
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_certifications>("bpf_ecer_application_ecer_certifications", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_certifications>("bpf_ecer_application_ecer_certifications", null, value);
			}
		}
		
		/// <summary>
		/// 1:N ecer_characterreference_Applicationid
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_characterreference_Applicationid")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_CharacterReference> ecer_characterreference_Applicationid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_CharacterReference>("ecer_characterreference_Applicationid", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_CharacterReference>("ecer_characterreference_Applicationid", null, value);
			}
		}
		
		/// <summary>
		/// 1:N ecer_comment_Application_ecer_application
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_comment_Application_ecer_application")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_Comment> ecer_comment_Application_ecer_application
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_Comment>("ecer_comment_Application_ecer_application", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_Comment>("ecer_comment_Application_ecer_application", null, value);
			}
		}
		
		/// <summary>
		/// 1:N ecer_communication_Applicationid
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_communication_Applicationid")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_Communication> ecer_communication_Applicationid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_Communication>("ecer_communication_Applicationid", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_Communication>("ecer_communication_Applicationid", null, value);
			}
		}
		
		/// <summary>
		/// 1:N ecer_ecer_professionaldevelopment_Applicationi
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_ecer_professionaldevelopment_Applicationi")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_ProfessionalDevelopment> ecer_ecer_professionaldevelopment_Applicationi
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_ProfessionalDevelopment>("ecer_ecer_professionaldevelopment_Applicationi", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_ProfessionalDevelopment>("ecer_ecer_professionaldevelopment_Applicationi", null, value);
			}
		}
		
		/// <summary>
		/// 1:N ecer_guardianreference_Applicationid
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_guardianreference_Applicationid")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_GuardianReference> ecer_guardianreference_Applicationid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_GuardianReference>("ecer_guardianreference_Applicationid", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_GuardianReference>("ecer_guardianreference_Applicationid", null, value);
			}
		}
		
		/// <summary>
		/// 1:N ecer_transcript_Applicationid
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_transcript_Applicationid")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_Transcript> ecer_transcript_Applicationid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_Transcript>("ecer_transcript_Applicationid", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_Transcript>("ecer_transcript_Applicationid", null, value);
			}
		}
		
		/// <summary>
		/// 1:N ecer_workexperienceref_Applicationid_ecer
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_workexperienceref_Applicationid_ecer")]
		public System.Collections.Generic.IEnumerable<ECER.Utilities.DataverseSdk.Model.ecer_WorkExperienceRef> ecer_workexperienceref_Applicationid_ecer
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_WorkExperienceRef>("ecer_workexperienceref_Applicationid_ecer", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntities<ECER.Utilities.DataverseSdk.Model.ecer_WorkExperienceRef>("ecer_workexperienceref_Applicationid_ecer", null, value);
			}
		}
		
		/// <summary>
		/// N:1 ecer_application_Applicantid_contact
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_applicantid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_application_Applicantid_contact")]
		public ECER.Utilities.DataverseSdk.Model.Contact ecer_application_Applicantid_contact
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<ECER.Utilities.DataverseSdk.Model.Contact>("ecer_application_Applicantid_contact", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntity<ECER.Utilities.DataverseSdk.Model.Contact>("ecer_application_Applicantid_contact", null, value);
			}
		}
		
		/// <summary>
		/// N:1 ecer_application_Certificateid
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_certificateid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_application_Certificateid")]
		public ECER.Utilities.DataverseSdk.Model.ecer_Certificate ecer_application_Certificateid
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<ECER.Utilities.DataverseSdk.Model.ecer_Certificate>("ecer_application_Certificateid", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntity<ECER.Utilities.DataverseSdk.Model.ecer_Certificate>("ecer_application_Certificateid", null, value);
			}
		}
		
		/// <summary>
		/// N:1 ecer_application_DenialReasonType_ecer_denialr
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ecer_denialreasontype")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("ecer_application_DenialReasonType_ecer_denialr")]
		public ECER.Utilities.DataverseSdk.Model.ecer_DenialReason ecer_application_DenialReasonType_ecer_denialr
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntity<ECER.Utilities.DataverseSdk.Model.ecer_DenialReason>("ecer_application_DenialReasonType_ecer_denialr", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.SetRelatedEntity<ECER.Utilities.DataverseSdk.Model.ecer_DenialReason>("ecer_application_DenialReasonType_ecer_denialr", null, value);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public ecer_Application(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["ecer_applicationid"] = base.Id;
                        break;
                    case "ecer_applicationid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}
#pragma warning restore CS1591
