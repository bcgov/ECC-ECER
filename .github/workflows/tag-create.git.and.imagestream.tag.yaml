name: Build and Tag Image in Openshift then Create Github Tag

# this action will create a tag from either release/master or master branch on github.
# it will also build the image in openshift at the same time.
# once this is done, we can run the deploy-to-dev or deploy-efxdev action to bring it into the environment.
# if we want to run this action again for the same tag number (ex. there are additional changes needed), we will have to delete the github tag first before rerunning it.

env:
  OPENSHIFT_SERVER: ${{ vars.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: ${{ secrets.ECER_NAMESPACE_NO_ENV }}-tools

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
    inputs:
      version:
        description: "Version Number in x.x.x format ex. 1.0.0"
        required: true

jobs:
  validate-input:
    name: Validate Input
    runs-on: ubuntu-22.04
    steps:
      # this step will check the user input and branch name. Then set the IMAGETAG variable to be used to tag image in openshift. Ex. release/master => release-master
      - name: Check user input and branch
        run: |
          regex='^[0-9]+\.[0-9]+\.[0-9]+$'
          if [[ "${{github.event.inputs.version}}" =~ $regex ]]; then
            echo user input validated ${{github.event.inputs.version}}
          else
            echo ::error::input must be in x.x.x format your input was ${{github.event.inputs.version}}
            exit 1
          fi

          if [[ "${{github.ref_name}}" == "master" ]] || [[ "${{github.ref_name}}" == "release/master" ]]; then

            modified_branch_name=$(echo "${{github.ref_name}}" | tr '/' '-')
            echo "IMAGETAG=$modified_branch_name" >> $GITHUB_ENV

            echo branch validated ${{github.ref_name}} setting IMAGETAG to $modified_branch_name
          else
            echo ::error:: we must run workflow from master or release/master branch - selected branch was ${{github.ref_name}}
            exit 1
          fi

  build-api:
    needs: validate-input
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    uses: ./.github/workflows/build-template.yml
    with:
      IMAGE_CONTEXT: src
      IMAGE_FILE: src/api.Dockerfile
      IMAGE_NAME: api
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
    secrets:
      REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  build-registry-portal:
    needs: validate-input
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    uses: ./.github/workflows/build-template.yml
    with:
      IMAGE_CONTEXT: src
      IMAGE_FILE: src/registry-portal.Dockerfile
      IMAGE_NAME: registry-portal
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
    secrets:
      REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  build-e2e-test-data:
    needs: validate-input
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    uses: ./.github/workflows/build-template.yml
    with:
      IMAGE_CONTEXT: src
      IMAGE_FILE: src/e2e-test-data.Dockerfile
      IMAGE_NAME: e2e-test-data
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
    secrets:
      REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  build-psp-portal:
    needs: validate-input
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    uses: ./.github/workflows/build-template.yml
    with:
      IMAGE_CONTEXT: src
      IMAGE_FILE: src/psp-portal.Dockerfile
      IMAGE_NAME: psp-portal
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
    secrets:
      REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  git-tag:
    name: Tag image
    runs-on: ubuntu-22.04
    needs:
      [
        validate-input,
        build-api,
        build-registry-portal,
        build-e2e-test-data,
        build-psp-portal,
      ]
    environment: dev

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Create tag
        uses: actions/github-script@v8
        with:
          script: |
            console.log(`this action was run on branch :: ${context.ref}`);
            console.log(`Github SHA :: ${context.sha}`);
            console.log(`Action run by :: ${context.actor}`);

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ github.event.inputs.version }}',
              sha: context.sha
            })
